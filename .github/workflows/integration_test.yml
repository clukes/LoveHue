name: Integration Tests
on:
    push:
        branches:
            - main
    pull_request:

jobs:
    # ios:
    #   # Creates a build matrix for your jobs. You can define different variations of an environment to run each job
    #   strategy:
    #     matrix:
    #       device:
    #         # The available simulators are listed by the "xcrun xctrace list devices" command
    #         - "iPhone 11 Simulator (15.2)" # the name of the simulator could be different depending on the macos version you are using
    #     # if one of the jobs in the matrix expansion fails, the rest of the jobs will be cancelled
    #     fail-fast: true
    #   runs-on: macos-11 # or macos-latest if you prefer, but be aware that the available simulators could be different if you run a different version
    #   steps:
    #     - name: "List all simulators"
    #       run: "xcrun xctrace list devices"
    #     - name: "Start Simulator"
    #       # the command "xcrun simctl boot" expects a device identifier
    #       # the assignment of the UDID variable consists of retrieving the ID of the simulator
    #       # by extracting it from the command "xcrun xctrace list devices"
    #       run: |
    #         UDID=$(xcrun xctrace list devices | grep "^${{ matrix.device }}" | awk '{gsub(/[()]/,""); print $NF}')
    #         echo $UDID
    #         xcrun simctl boot "${UDID:?No Simulator with this name found}"
    #     - uses: actions/checkout@v3
    #     - name: Setup Flutter SDK
    #       uses: subosito/flutter-action@v2
    #       with:
    #         channel: stable
    #         # instead of "channel: stable", you could be more precise by specifying the exact version of Flutter you're using:
    #         # flutter-version: '<FLUTTER_VERSION>'
    #     - name: Install Flutter dependencies
    #       run: flutter pub get
    #     - name: Run integration tests
    #       run: flutter test integration_test --verbose

    android:
        runs-on: macos-latest
        strategy:
            matrix:
                api-level: [29, 33]
                target: [google_apis]
                arch: [x86_64]
            fail-fast: true
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            - name: Setup java
              uses: actions/setup-java@v3
              with:
                  distribution: "temurin"
                  java-version: "17"
            - name: Install Firebase Emulator Suite
              run: npm install -g firebase-tools
            - name: Start firebase emulator
              run: firebase emulators:start &
            - name: Emulator cache
              uses: actions/cache@v3
              id: firebase-emulator-cache
              with:
                  path: |
                      ~/.cache/firebase/emulators
                  key: firebase-emulator-${{runner.os}}
            - name: Setup Flutter SDK
              uses: subosito/flutter-action@v2
              with:
                  channel: stable
            - name: Install Flutter dependencies
              run: flutter pub get
            - name: Gradle cache
              uses: gradle/gradle-build-action@v2
            - name: AVD cache
              uses: actions/cache@v3
              id: avd-cache
              with:
                  path: |
                      ~/.android/avd/*
                      ~/.android/adb*
                  key: avd-${{ matrix.api-level }}
            - name: Create AVD and generate snapshot for caching
              if: steps.avd-cache.outputs.cache-hit != 'true'
              uses: reactivecircus/android-emulator-runner@v2
              with:
                  api-level: ${{ matrix.api-level }}
                  target: ${{ matrix.target }}
                  arch: ${{ matrix.arch }}
                  force-avd-creation: false
                  emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
                  disable-animations: false
                  script: echo "Generated AVD snapshot for caching."
            - name: Run tests
              uses: reactivecircus/android-emulator-runner@v2
              with:
                  api-level: ${{ matrix.api-level }}
                  target: ${{ matrix.target }}
                  arch: ${{ matrix.arch }}
                  force-avd-creation: false
                  emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
                  disable-animations: true
                  script: flutter drive --driver=integration_test/test_driver/test_driver.dart --target integration_test/main.dart
            - name: Upload Screenshots
              uses: actions/upload-artifact@v3
              with:
                  name: Test result screenshots
                  path: screenshots/*.png

    web:
        runs-on: macos-latest
        steps:
            - name: Checkout code
              uses: actions/checkout@v3
            - name: Setup java
              uses: actions/setup-java@v3
              with:
                  distribution: "temurin"
                  java-version: "17"
            - name: Install Firebase Emulator Suite
              run: npm install -g firebase-tools
            - name: Start firebase emulator
              run: firebase emulators:start &
            - name: Emulator cache
              uses: actions/cache@v3
              id: firebase-emulator-cache
              with:
                  path: |
                      ~//.cache/firebase/emulators
                  key: firebase-emulator-${{runner.os}}
            - name: Install chromedriver
              uses: nanasess/setup-chromedriver@v2
            - name: Start chromedriver
              run: chromedriver --port=4444 &
            - name: Setup Flutter SDK
              uses: subosito/flutter-action@v2
              with:
                  channel: stable
            - name: Install Flutter dependencies
              run: flutter pub get
            - name: Run integration tests
              run: flutter drive --driver=integration_test/test_driver/test_driver.dart --target integration_test/main.dart -d chrome
            - name: Upload Screenshots
              uses: actions/upload-artifact@v3
              with:
                  name: Test result screenshots
                  path: screenshots/*.png
