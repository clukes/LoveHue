// Mocks generated by Mockito 5.1.0 from annotations
// in lovehue/test/models/link_code_firestore_collection_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:ui' as _i6;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:lovehue/models/userinfo_firestore_collection_model.dart' as _i5;
import 'package:lovehue/providers/partners_info_state.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeValueNotifier_0<T> extends _i1.Fake implements _i2.ValueNotifier<T> {
}

class _FakeFirebaseFirestore_1 extends _i1.Fake
    implements _i3.FirebaseFirestore {}

class _FakeCollectionReference_2<T extends Object?> extends _i1.Fake
    implements _i3.CollectionReference<T> {}

class _FakeDocumentSnapshot_3<T extends Object?> extends _i1.Fake
    implements _i3.DocumentSnapshot<T> {}

class _FakeDocumentReference_4<T extends Object?> extends _i1.Fake
    implements _i3.DocumentReference<T> {}

/// A class which mocks [PartnersInfoState].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartnersInfoState extends _i1.Mock implements _i4.PartnersInfoState {
  MockPartnersInfoState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ValueNotifier<String> get partnersName =>
      (super.noSuchMethod(Invocation.getter(#partnersName),
              returnValue: _FakeValueNotifier_0<String>())
          as _i2.ValueNotifier<String>);

  @override
  set partnersName(_i2.ValueNotifier<String>? _partnersName) =>
      super.noSuchMethod(Invocation.setter(#partnersName, _partnersName),
          returnValueForMissingStub: null);
  @override
  bool get partnerExist =>
      (super.noSuchMethod(Invocation.getter(#partnerExist), returnValue: false)
          as bool);
  @override
  bool get partnerLinked =>
      (super.noSuchMethod(Invocation.getter(#partnerLinked), returnValue: false)
          as bool);
  @override
  bool get partnerPending => (super
          .noSuchMethod(Invocation.getter(#partnerPending), returnValue: false)
      as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void notify() => super.noSuchMethod(Invocation.method(#notify, []),
      returnValueForMissingStub: null);
  @override
  void setupPartnerInfoSubscription() =>
      super.noSuchMethod(Invocation.method(#setupPartnerInfoSubscription, []),
          returnValueForMissingStub: null);
  @override
  void addPartner(_i5.UserInformation? newPartnerInfo) =>
      super.noSuchMethod(Invocation.method(#addPartner, [newPartnerInfo]),
          returnValueForMissingStub: null);
  @override
  void removePartner() =>
      super.noSuchMethod(Invocation.method(#removePartner, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i6.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i3.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_1()) as _i3.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i3.CollectionReference<T> get parent =>
      (super.noSuchMethod(Invocation.getter(#parent),
              returnValue: _FakeCollectionReference_2<T>())
          as _i3.CollectionReference<T>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i3.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_2<Map<String, dynamic>>())
          as _i3.CollectionReference<Map<String, dynamic>>);
  @override
  _i7.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> update(Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#update, [data]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<_i3.DocumentSnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: Future<_i3.DocumentSnapshot<T>>.value(
                  _FakeDocumentSnapshot_3<T>()))
          as _i7.Future<_i3.DocumentSnapshot<T>>);
  @override
  _i7.Stream<_i3.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: Stream<_i3.DocumentSnapshot<T>>.empty())
          as _i7.Stream<_i3.DocumentSnapshot<T>>);
  @override
  _i7.Future<void> set(T? data, [_i3.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i3.DocumentReference<R> withConverter<R>(
          {_i3.FromFirestore<R>? fromFirestore,
          _i3.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference_4<R>())
          as _i3.DocumentReference<R>);
}
