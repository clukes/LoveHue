// Mocks generated by Mockito 5.1.0 from annotations
// in lovehue/test/providers/application_state_test.dart.
// Do not manually edit this file.

import 'dart:ui' as _i8;

import 'package:cloud_firestore/cloud_firestore.dart' as _i3;
import 'package:flutter/material.dart' as _i4;
import 'package:lovehue/models/relationship_bar_document.dart' as _i7;
import 'package:lovehue/models/user_information.dart' as _i6;
import 'package:lovehue/providers/partners_info_state.dart' as _i2;
import 'package:lovehue/providers/user_info_state.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakePartnersInfoState_0 extends _i1.Fake
    implements _i2.PartnersInfoState {}

class _FakeFirebaseFirestore_1 extends _i1.Fake
    implements _i3.FirebaseFirestore {}

class _FakeValueNotifier_2<T> extends _i1.Fake implements _i4.ValueNotifier<T> {
}

/// A class which mocks [UserInfoState].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInfoState extends _i1.Mock implements _i5.UserInfoState {
  MockUserInfoState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.PartnersInfoState get partnersInfoState =>
      (super.noSuchMethod(Invocation.getter(#partnersInfoState),
          returnValue: _FakePartnersInfoState_0()) as _i2.PartnersInfoState);
  @override
  _i3.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
          returnValue: _FakeFirebaseFirestore_1()) as _i3.FirebaseFirestore);
  @override
  set userInfo(_i6.UserInformation? _userInfo) =>
      super.noSuchMethod(Invocation.setter(#userInfo, _userInfo),
          returnValueForMissingStub: null);
  @override
  set latestRelationshipBarDoc(
          _i7.RelationshipBarDocument? _latestRelationshipBarDoc) =>
      super.noSuchMethod(
          Invocation.setter(
              #latestRelationshipBarDoc, _latestRelationshipBarDoc),
          returnValueForMissingStub: null);
  @override
  bool get barsChanged =>
      (super.noSuchMethod(Invocation.getter(#barsChanged), returnValue: false)
          as bool);
  @override
  set barsChanged(bool? _barsChanged) =>
      super.noSuchMethod(Invocation.setter(#barsChanged, _barsChanged),
          returnValueForMissingStub: null);
  @override
  bool get barsReset =>
      (super.noSuchMethod(Invocation.getter(#barsReset), returnValue: false)
          as bool);
  @override
  set barsReset(bool? _barsReset) =>
      super.noSuchMethod(Invocation.setter(#barsReset, _barsReset),
          returnValueForMissingStub: null);
  @override
  bool get userExist =>
      (super.noSuchMethod(Invocation.getter(#userExist), returnValue: false)
          as bool);
  @override
  bool get userPending =>
      (super.noSuchMethod(Invocation.getter(#userPending), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  bool partnerLinked() =>
      (super.noSuchMethod(Invocation.method(#partnerLinked, []),
          returnValue: false) as bool);
  @override
  void setupUserInfoSubscription() =>
      super.noSuchMethod(Invocation.method(#setupUserInfoSubscription, []),
          returnValueForMissingStub: null);
  @override
  void addUser(_i6.UserInformation? newUserInfo) =>
      super.noSuchMethod(Invocation.method(#addUser, [newUserInfo]),
          returnValueForMissingStub: null);
  @override
  void removeUser() => super.noSuchMethod(Invocation.method(#removeUser, []),
      returnValueForMissingStub: null);
  @override
  void barChange() => super.noSuchMethod(Invocation.method(#barChange, []),
      returnValueForMissingStub: null);
  @override
  void resetBarChange() =>
      super.noSuchMethod(Invocation.method(#resetBarChange, []),
          returnValueForMissingStub: null);
  @override
  void addListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [PartnersInfoState].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartnersInfoState extends _i1.Mock implements _i2.PartnersInfoState {
  MockPartnersInfoState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ValueNotifier<String> get partnersName =>
      (super.noSuchMethod(Invocation.getter(#partnersName),
              returnValue: _FakeValueNotifier_2<String>())
          as _i4.ValueNotifier<String>);
  @override
  set partnersName(_i4.ValueNotifier<String>? _partnersName) =>
      super.noSuchMethod(Invocation.setter(#partnersName, _partnersName),
          returnValueForMissingStub: null);
  @override
  bool get partnerExist =>
      (super.noSuchMethod(Invocation.getter(#partnerExist), returnValue: false)
          as bool);
  @override
  bool get partnerPending => (super
          .noSuchMethod(Invocation.getter(#partnerPending), returnValue: false)
      as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void notify() => super.noSuchMethod(Invocation.method(#notify, []),
      returnValueForMissingStub: null);
  @override
  void setupPartnerInfoSubscription(_i6.UserInformation? currentUserInfo) =>
      super.noSuchMethod(
          Invocation.method(#setupPartnerInfoSubscription, [currentUserInfo]),
          returnValueForMissingStub: null);
  @override
  void addPartner(_i6.UserInformation? newPartnerInfo,
          _i6.UserInformation? currentUserInfo) =>
      super.noSuchMethod(
          Invocation.method(#addPartner, [newPartnerInfo, currentUserInfo]),
          returnValueForMissingStub: null);
  @override
  void removePartner(_i6.UserInformation? currentUserInfo) =>
      super.noSuchMethod(Invocation.method(#removePartner, [currentUserInfo]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
