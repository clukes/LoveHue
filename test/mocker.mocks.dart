// Mocks generated by Mockito 5.3.0 from annotations
// in lovehue/test/mocker.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:ui' as _i14;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:flutter/material.dart' as _i8;
import 'package:flutter/scheduler.dart' as _i11;
import 'package:flutter/src/foundation/diagnostics.dart' as _i9;
import 'package:flutterfire_ui/auth.dart' as _i17;
import 'package:lovehue/models/relationship_bar_document.dart' as _i16;
import 'package:lovehue/models/user_information.dart' as _i15;
import 'package:lovehue/providers/application_state.dart' as _i12;
import 'package:lovehue/providers/partners_info_state.dart' as _i3;
import 'package:lovehue/providers/user_info_state.dart' as _i2;
import 'package:lovehue/resources/authentication_info.dart' as _i6;
import 'package:lovehue/utils/app_info_class.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:package_info_plus/package_info_plus.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserInfoState_0 extends _i1.SmartFake implements _i2.UserInfoState {
  _FakeUserInfoState_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePartnersInfoState_1 extends _i1.SmartFake
    implements _i3.PartnersInfoState {
  _FakePartnersInfoState_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFirebaseFirestore_2 extends _i1.SmartFake
    implements _i4.FirebaseFirestore {
  _FakeFirebaseFirestore_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAppInfo_3 extends _i1.SmartFake implements _i5.AppInfo {
  _FakeAppInfo_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAuthenticationInfo_4 extends _i1.SmartFake
    implements _i6.AuthenticationInfo {
  _FakeAuthenticationInfo_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFirebaseAuth_5 extends _i1.SmartFake implements _i7.FirebaseAuth {
  _FakeFirebaseAuth_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeValueNotifier_6<T> extends _i1.SmartFake
    implements _i8.ValueNotifier<T> {
  _FakeValueNotifier_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCollectionReference_7<T extends Object?> extends _i1.SmartFake
    implements _i4.CollectionReference<T> {
  _FakeCollectionReference_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_8<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocumentReference_9<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentReference<T> {
  _FakeDocumentReference_9(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWidget_10 extends _i1.SmartFake implements _i8.Widget {
  _FakeWidget_10(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_11 extends _i1.SmartFake
    implements _i8.InheritedWidget {
  _FakeInheritedWidget_11(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_12 extends _i1.SmartFake
    implements _i8.DiagnosticsNode {
  _FakeDiagnosticsNode_12(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString(
          {_i9.TextTreeConfiguration? parentConfiguration,
          _i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeActionCodeSettings_13 extends _i1.SmartFake
    implements _i7.ActionCodeSettings {
  _FakeActionCodeSettings_13(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakePackageInfo_14 extends _i1.SmartFake implements _i10.PackageInfo {
  _FakePackageInfo_14(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFocusScopeNode_15 extends _i1.SmartFake
    implements _i8.FocusScopeNode {
  _FakeFocusScopeNode_15(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeNavigator_16 extends _i1.SmartFake implements _i8.Navigator {
  _FakeNavigator_16(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_17 extends _i1.SmartFake implements _i8.BuildContext {
  _FakeBuildContext_17(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeTicker_18 extends _i1.SmartFake implements _i11.Ticker {
  _FakeTicker_18(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

/// A class which mocks [ApplicationState].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationState extends _i1.Mock implements _i12.ApplicationState {
  MockApplicationState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.ApplicationLoginState get loginState =>
      (super.noSuchMethod(Invocation.getter(#loginState),
              returnValue: _i12.ApplicationLoginState.loggedOut)
          as _i12.ApplicationLoginState);
  @override
  set loginState(_i12.ApplicationLoginState? _loginState) =>
      super.noSuchMethod(Invocation.setter(#loginState, _loginState),
          returnValueForMissingStub: null);
  @override
  _i2.UserInfoState get userInfoState =>
      (super.noSuchMethod(Invocation.getter(#userInfoState),
              returnValue:
                  _FakeUserInfoState_0(this, Invocation.getter(#userInfoState)))
          as _i2.UserInfoState);
  @override
  _i3.PartnersInfoState get partnersInfoState =>
      (super.noSuchMethod(Invocation.getter(#partnersInfoState),
              returnValue: _FakePartnersInfoState_1(
                  this, Invocation.getter(#partnersInfoState)))
          as _i3.PartnersInfoState);
  @override
  _i4.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
              returnValue:
                  _FakeFirebaseFirestore_2(this, Invocation.getter(#firestore)))
          as _i4.FirebaseFirestore);
  @override
  _i5.AppInfo get appInfo => (super.noSuchMethod(Invocation.getter(#appInfo),
          returnValue: _FakeAppInfo_3(this, Invocation.getter(#appInfo)))
      as _i5.AppInfo);
  @override
  _i6.AuthenticationInfo get authenticationInfo =>
      (super.noSuchMethod(Invocation.getter(#authenticationInfo),
              returnValue: _FakeAuthenticationInfo_4(
                  this, Invocation.getter(#authenticationInfo)))
          as _i6.AuthenticationInfo);
  @override
  _i7.FirebaseAuth get auth => (super.noSuchMethod(Invocation.getter(#auth),
          returnValue: _FakeFirebaseAuth_5(this, Invocation.getter(#auth)))
      as _i7.FirebaseAuth);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i13.Future<void> signInAnonymously(_i8.NavigatorState? navigator) =>
      (super.noSuchMethod(Invocation.method(#signInAnonymously, [navigator]),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  void addListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [UserInfoState].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInfoState extends _i1.Mock implements _i2.UserInfoState {
  MockUserInfoState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PartnersInfoState get partnersInfoState =>
      (super.noSuchMethod(Invocation.getter(#partnersInfoState),
              returnValue: _FakePartnersInfoState_1(
                  this, Invocation.getter(#partnersInfoState)))
          as _i3.PartnersInfoState);
  @override
  _i4.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
              returnValue:
                  _FakeFirebaseFirestore_2(this, Invocation.getter(#firestore)))
          as _i4.FirebaseFirestore);
  @override
  set firestore(_i4.FirebaseFirestore? _firestore) =>
      super.noSuchMethod(Invocation.setter(#firestore, _firestore),
          returnValueForMissingStub: null);
  @override
  set userInfo(_i15.UserInformation? _userInfo) =>
      super.noSuchMethod(Invocation.setter(#userInfo, _userInfo),
          returnValueForMissingStub: null);
  @override
  set latestRelationshipBarDoc(
          _i16.RelationshipBarDocument? _latestRelationshipBarDoc) =>
      super.noSuchMethod(
          Invocation.setter(
              #latestRelationshipBarDoc, _latestRelationshipBarDoc),
          returnValueForMissingStub: null);
  @override
  bool get barsChanged =>
      (super.noSuchMethod(Invocation.getter(#barsChanged), returnValue: false)
          as bool);
  @override
  set barsChanged(bool? _barsChanged) =>
      super.noSuchMethod(Invocation.setter(#barsChanged, _barsChanged),
          returnValueForMissingStub: null);
  @override
  bool get barsReset =>
      (super.noSuchMethod(Invocation.getter(#barsReset), returnValue: false)
          as bool);
  @override
  set barsReset(bool? _barsReset) =>
      super.noSuchMethod(Invocation.setter(#barsReset, _barsReset),
          returnValueForMissingStub: null);
  @override
  bool get userExist =>
      (super.noSuchMethod(Invocation.getter(#userExist), returnValue: false)
          as bool);
  @override
  bool get userPending =>
      (super.noSuchMethod(Invocation.getter(#userPending), returnValue: false)
          as bool);
  @override
  bool get partnerLinked =>
      (super.noSuchMethod(Invocation.getter(#partnerLinked), returnValue: false)
          as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void setupUserInfoSubscription() =>
      super.noSuchMethod(Invocation.method(#setupUserInfoSubscription, []),
          returnValueForMissingStub: null);
  @override
  void addUser(_i15.UserInformation? newUserInfo) =>
      super.noSuchMethod(Invocation.method(#addUser, [newUserInfo]),
          returnValueForMissingStub: null);
  @override
  void removeUser() => super.noSuchMethod(Invocation.method(#removeUser, []),
      returnValueForMissingStub: null);
  @override
  void barChange() => super.noSuchMethod(Invocation.method(#barChange, []),
      returnValueForMissingStub: null);
  @override
  void resetBarChange() =>
      super.noSuchMethod(Invocation.method(#resetBarChange, []),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> connectTo(String? linkCode) =>
      (super.noSuchMethod(Invocation.method(#connectTo, [linkCode]),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> acceptRequest() =>
      (super.noSuchMethod(Invocation.method(#acceptRequest, []),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> unlink() =>
      (super.noSuchMethod(Invocation.method(#unlink, []),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> saveBars() =>
      (super.noSuchMethod(Invocation.method(#saveBars, []),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  void addListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [PartnersInfoState].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartnersInfoState extends _i1.Mock implements _i3.PartnersInfoState {
  MockPartnersInfoState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set partnersInfo(_i15.UserInformation? _partnersInfo) =>
      super.noSuchMethod(Invocation.setter(#partnersInfo, _partnersInfo),
          returnValueForMissingStub: null);
  @override
  _i8.ValueNotifier<String> get partnersName =>
      (super.noSuchMethod(Invocation.getter(#partnersName),
              returnValue: _FakeValueNotifier_6<String>(
                  this, Invocation.getter(#partnersName)))
          as _i8.ValueNotifier<String>);
  @override
  set partnersName(_i8.ValueNotifier<String>? _partnersName) =>
      super.noSuchMethod(Invocation.setter(#partnersName, _partnersName),
          returnValueForMissingStub: null);
  @override
  bool get partnerExist =>
      (super.noSuchMethod(Invocation.getter(#partnerExist), returnValue: false)
          as bool);
  @override
  bool get partnerPending => (super
          .noSuchMethod(Invocation.getter(#partnerPending), returnValue: false)
      as bool);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  void notify() => super.noSuchMethod(Invocation.method(#notify, []),
      returnValueForMissingStub: null);
  @override
  void setupPartnerInfoSubscription(_i15.UserInformation? currentUserInfo) =>
      super.noSuchMethod(
          Invocation.method(#setupPartnerInfoSubscription, [currentUserInfo]),
          returnValueForMissingStub: null);
  @override
  void addPartner(_i15.UserInformation? newPartnerInfo,
          _i15.UserInformation? currentUserInfo) =>
      super.noSuchMethod(
          Invocation.method(#addPartner, [newPartnerInfo, currentUserInfo]),
          returnValueForMissingStub: null);
  @override
  void removePartner(_i15.UserInformation? currentUserInfo) =>
      super.noSuchMethod(Invocation.method(#removePartner, [currentUserInfo]),
          returnValueForMissingStub: null);
  @override
  void addListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i4.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
              returnValue:
                  _FakeFirebaseFirestore_2(this, Invocation.getter(#firestore)))
          as _i4.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.CollectionReference<T> get parent => (super.noSuchMethod(
          Invocation.getter(#parent),
          returnValue:
              _FakeCollectionReference_7<T>(this, Invocation.getter(#parent)))
      as _i4.CollectionReference<T>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_7<Map<String, dynamic>>(
                  this, Invocation.method(#collection, [collectionPath])))
          as _i4.CollectionReference<Map<String, dynamic>>);
  @override
  _i13.Future<void> delete() =>
      (super.noSuchMethod(Invocation.method(#delete, []),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> update(Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#update, [data]),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<_i4.DocumentSnapshot<T>> get([_i4.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: _i13.Future<_i4.DocumentSnapshot<T>>.value(
                  _FakeDocumentSnapshot_8<T>(
                      this, Invocation.method(#get, [options]))))
          as _i13.Future<_i4.DocumentSnapshot<T>>);
  @override
  _i13.Stream<_i4.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: _i13.Stream<_i4.DocumentSnapshot<T>>.empty())
          as _i13.Stream<_i4.DocumentSnapshot<T>>);
  @override
  _i13.Future<void> set(T? data, [_i4.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i4.DocumentReference<R> withConverter<R>(
          {_i4.FromFirestore<R>? fromFirestore,
          _i4.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference_9<R>(
                  this,
                  Invocation.method(
                      #withConverter, [], {#fromFirestore: fromFirestore, #toFirestore: toFirestore})))
          as _i4.DocumentReference<R>);
}

/// A class which mocks [UserInformation].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInformation extends _i1.Mock implements _i15.UserInformation {
  MockUserInformation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get userID =>
      (super.noSuchMethod(Invocation.getter(#userID), returnValue: '')
          as String);
  @override
  set displayName(String? _displayName) =>
      super.noSuchMethod(Invocation.setter(#displayName, _displayName),
          returnValueForMissingStub: null);
  @override
  set partner(_i4.DocumentReference<Object?>? _partner) =>
      super.noSuchMethod(Invocation.setter(#partner, _partner),
          returnValueForMissingStub: null);
  @override
  _i4.DocumentReference<Object?> get linkCode =>
      (super.noSuchMethod(Invocation.getter(#linkCode),
              returnValue: _FakeDocumentReference_9<Object?>(
                  this, Invocation.getter(#linkCode)))
          as _i4.DocumentReference<Object?>);
  @override
  set linkCode(_i4.DocumentReference<Object?>? _linkCode) =>
      super.noSuchMethod(Invocation.setter(#linkCode, _linkCode),
          returnValueForMissingStub: null);
  @override
  bool get linkPending =>
      (super.noSuchMethod(Invocation.getter(#linkPending), returnValue: false)
          as bool);
  @override
  set linkPending(bool? _linkPending) =>
      super.noSuchMethod(Invocation.setter(#linkPending, _linkPending),
          returnValueForMissingStub: null);
  @override
  _i4.FirebaseFirestore get firestore =>
      (super.noSuchMethod(Invocation.getter(#firestore),
              returnValue:
                  _FakeFirebaseFirestore_2(this, Invocation.getter(#firestore)))
          as _i4.FirebaseFirestore);
  @override
  set firestore(_i4.FirebaseFirestore? _firestore) =>
      super.noSuchMethod(Invocation.setter(#firestore, _firestore),
          returnValueForMissingStub: null);
  @override
  Map<String, Object?> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, Object?>{}) as Map<String, Object?>);
  @override
  _i4.DocumentReference<_i15.UserInformation?> getUserInDatabase() =>
      (super.noSuchMethod(Invocation.method(#getUserInDatabase, []),
              returnValue: _FakeDocumentReference_9<_i15.UserInformation?>(
                  this, Invocation.method(#getUserInDatabase, [])))
          as _i4.DocumentReference<_i15.UserInformation?>);
  @override
  _i13.Future<void> firestoreSet() =>
      (super.noSuchMethod(Invocation.method(#firestoreSet, []),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> firestoreUpdateColumns(Map<String, Object?>? data) =>
      (super.noSuchMethod(Invocation.method(#firestoreUpdateColumns, [data]),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> firestoreDelete() =>
      (super.noSuchMethod(Invocation.method(#firestoreDelete, []),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> deleteUserData(_i8.BuildContext? context,
          _i7.FirebaseAuth? auth, _i6.AuthenticationInfo? authenticationInfo) =>
      (super.noSuchMethod(
              Invocation.method(
                  #deleteUserData, [context, auth, authenticationInfo]),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  _i13.Future<void> setupUserInDatabase(_i2.UserInfoState? userInfoState) =>
      (super.noSuchMethod(
              Invocation.method(#setupUserInDatabase, [userInfoState]),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i8.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Widget get widget => (super.noSuchMethod(Invocation.getter(#widget),
          returnValue: _FakeWidget_10(this, Invocation.getter(#widget)))
      as _i8.Widget);
  @override
  bool get debugDoingBuild => (super
          .noSuchMethod(Invocation.getter(#debugDoingBuild), returnValue: false)
      as bool);
  @override
  _i8.InheritedWidget dependOnInheritedElement(_i8.InheritedElement? ancestor,
          {Object? aspect}) =>
      (super.noSuchMethod(
          Invocation.method(
              #dependOnInheritedElement, [ancestor], {#aspect: aspect}),
          returnValue: _FakeInheritedWidget_11(
              this,
              Invocation.method(#dependOnInheritedElement, [ancestor],
                  {#aspect: aspect}))) as _i8.InheritedWidget);
  @override
  void visitAncestorElements(bool Function(_i8.Element)? visitor) =>
      super.noSuchMethod(Invocation.method(#visitAncestorElements, [visitor]),
          returnValueForMissingStub: null);
  @override
  void visitChildElements(_i8.ElementVisitor? visitor) =>
      super.noSuchMethod(Invocation.method(#visitChildElements, [visitor]),
          returnValueForMissingStub: null);
  @override
  void dispatchNotification(_i8.Notification? notification) => super
      .noSuchMethod(Invocation.method(#dispatchNotification, [notification]),
          returnValueForMissingStub: null);
  @override
  _i8.DiagnosticsNode describeElement(String? name,
          {_i9.DiagnosticsTreeStyle? style =
              _i9.DiagnosticsTreeStyle.errorProperty}) =>
      (super.noSuchMethod(
              Invocation.method(#describeElement, [name], {#style: style}),
              returnValue: _FakeDiagnosticsNode_12(this,
                  Invocation.method(#describeElement, [name], {#style: style})))
          as _i8.DiagnosticsNode);
  @override
  _i8.DiagnosticsNode describeWidget(String? name,
          {_i9.DiagnosticsTreeStyle? style =
              _i9.DiagnosticsTreeStyle.errorProperty}) =>
      (super.noSuchMethod(
              Invocation.method(#describeWidget, [name], {#style: style}),
              returnValue: _FakeDiagnosticsNode_12(this,
                  Invocation.method(#describeWidget, [name], {#style: style})))
          as _i8.DiagnosticsNode);
  @override
  List<_i8.DiagnosticsNode> describeMissingAncestor(
          {Type? expectedAncestorType}) =>
      (super.noSuchMethod(
          Invocation.method(#describeMissingAncestor, [],
              {#expectedAncestorType: expectedAncestorType}),
          returnValue: <_i8.DiagnosticsNode>[]) as List<_i8.DiagnosticsNode>);
  @override
  _i8.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(Invocation.method(#describeOwnershipChain, [name]),
              returnValue: _FakeDiagnosticsNode_12(
                  this, Invocation.method(#describeOwnershipChain, [name])))
          as _i8.DiagnosticsNode);
}

/// A class which mocks [AuthenticationInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationInfo extends _i1.Mock
    implements _i6.AuthenticationInfo {
  MockAuthenticationInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ActionCodeSettings get actionCodeSettings =>
      (super.noSuchMethod(Invocation.getter(#actionCodeSettings),
              returnValue: _FakeActionCodeSettings_13(
                  this, Invocation.getter(#actionCodeSettings)))
          as _i7.ActionCodeSettings);
  @override
  set actionCodeSettings(_i7.ActionCodeSettings? _actionCodeSettings) => super
      .noSuchMethod(Invocation.setter(#actionCodeSettings, _actionCodeSettings),
          returnValueForMissingStub: null);
  @override
  _i10.PackageInfo get packageInfo =>
      (super.noSuchMethod(Invocation.getter(#packageInfo),
              returnValue:
                  _FakePackageInfo_14(this, Invocation.getter(#packageInfo)))
          as _i10.PackageInfo);
  @override
  set packageInfo(_i10.PackageInfo? _packageInfo) =>
      super.noSuchMethod(Invocation.setter(#packageInfo, _packageInfo),
          returnValueForMissingStub: null);
  @override
  List<_i17.ProviderConfiguration> get providerConfigs =>
      (super.noSuchMethod(Invocation.getter(#providerConfigs),
              returnValue: <_i17.ProviderConfiguration>[])
          as List<_i17.ProviderConfiguration>);
  @override
  set providerConfigs(List<_i17.ProviderConfiguration>? _providerConfigs) =>
      super.noSuchMethod(Invocation.setter(#providerConfigs, _providerConfigs),
          returnValueForMissingStub: null);
  @override
  _i13.Future<void> signInAnonymously(
          _i8.NavigatorState? navigator, _i7.FirebaseAuth? auth) =>
      (super.noSuchMethod(
              Invocation.method(#signInAnonymously, [navigator, auth]),
              returnValue: _i13.Future<void>.value(),
              returnValueForMissingStub: _i13.Future<void>.value())
          as _i13.Future<void>);
  @override
  void afterSignIn(_i8.NavigatorState? navigator) =>
      super.noSuchMethod(Invocation.method(#afterSignIn, [navigator]),
          returnValueForMissingStub: null);
  @override
  _i13.Future<bool> reauthenticate(
          _i8.BuildContext? context, _i7.FirebaseAuth? auth,
          {_i6.ReauthenticateHelper? helper}) =>
      (super.noSuchMethod(
          Invocation.method(
              #reauthenticate, [context, auth], {#helper: helper}),
          returnValue: _i13.Future<bool>.value(false)) as _i13.Future<bool>);
}

/// A class which mocks [AppInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppInfo extends _i1.Mock implements _i5.AppInfo {
  MockAppInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get appName =>
      (super.noSuchMethod(Invocation.getter(#appName), returnValue: '')
          as String);
  @override
  String get aboutText =>
      (super.noSuchMethod(Invocation.getter(#aboutText), returnValue: '')
          as String);
}

/// A class which mocks [NavigatorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorState extends _i1.Mock implements _i8.NavigatorState {
  MockNavigatorState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.FocusScopeNode get focusScopeNode => (super.noSuchMethod(
          Invocation.getter(#focusScopeNode),
          returnValue:
              _FakeFocusScopeNode_15(this, Invocation.getter(#focusScopeNode)))
      as _i8.FocusScopeNode);
  @override
  _i8.ValueNotifier<bool> get userGestureInProgressNotifier =>
      (super.noSuchMethod(Invocation.getter(#userGestureInProgressNotifier),
              returnValue: _FakeValueNotifier_6<bool>(
                  this, Invocation.getter(#userGestureInProgressNotifier)))
          as _i8.ValueNotifier<bool>);
  @override
  bool get userGestureInProgress =>
      (super.noSuchMethod(Invocation.getter(#userGestureInProgress),
          returnValue: false) as bool);
  @override
  _i8.Navigator get widget => (super.noSuchMethod(Invocation.getter(#widget),
          returnValue: _FakeNavigator_16(this, Invocation.getter(#widget)))
      as _i8.Navigator);
  @override
  _i8.BuildContext get context => (super.noSuchMethod(
          Invocation.getter(#context),
          returnValue: _FakeBuildContext_17(this, Invocation.getter(#context)))
      as _i8.BuildContext);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  bool get restorePending => (super
          .noSuchMethod(Invocation.getter(#restorePending), returnValue: false)
      as bool);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
  @override
  void restoreState(_i8.RestorationBucket? oldBucket, bool? initialRestore) =>
      super.noSuchMethod(
          Invocation.method(#restoreState, [oldBucket, initialRestore]),
          returnValueForMissingStub: null);
  @override
  void didToggleBucket(_i8.RestorationBucket? oldBucket) =>
      super.noSuchMethod(Invocation.method(#didToggleBucket, [oldBucket]),
          returnValueForMissingStub: null);
  @override
  void didChangeDependencies() =>
      super.noSuchMethod(Invocation.method(#didChangeDependencies, []),
          returnValueForMissingStub: null);
  @override
  void didUpdateWidget(_i8.StatefulWidget? oldWidget) =>
      super.noSuchMethod(Invocation.method(#didUpdateWidget, [oldWidget]),
          returnValueForMissingStub: null);
  @override
  void deactivate() => super.noSuchMethod(Invocation.method(#deactivate, []),
      returnValueForMissingStub: null);
  @override
  void activate() => super.noSuchMethod(Invocation.method(#activate, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i13.Future<T?> pushNamed<T extends Object?>(String? routeName,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamed, [routeName], {#arguments: arguments}),
          returnValue: _i13.Future<T?>.value()) as _i13.Future<T?>);
  @override
  String restorablePushNamed<T extends Object?>(String? routeName,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(
              #restorablePushNamed, [routeName], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  _i13.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacementNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: _i13.Future<T?>.value()) as _i13.Future<T?>);
  @override
  String restorablePushReplacementNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushReplacementNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: '') as String);
  @override
  _i13.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#popAndPushNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: _i13.Future<T?>.value()) as _i13.Future<T?>);
  @override
  String restorablePopAndPushNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePopAndPushNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: '') as String);
  @override
  _i13.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
          String? newRouteName, _i8.RoutePredicate? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamedAndRemoveUntil, [newRouteName, predicate],
              {#arguments: arguments}),
          returnValue: _i13.Future<T?>.value()) as _i13.Future<T?>);
  @override
  String restorablePushNamedAndRemoveUntil<T extends Object?>(
          String? newRouteName, _i8.RoutePredicate? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushNamedAndRemoveUntil,
              [newRouteName, predicate], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  _i13.Future<T?> push<T extends Object?>(_i8.Route<T>? route) =>
      (super.noSuchMethod(Invocation.method(#push, [route]),
          returnValue: _i13.Future<T?>.value()) as _i13.Future<T?>);
  @override
  String restorablePush<T extends Object?>(
          _i8.RestorableRouteBuilder<T>? routeBuilder,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(
              #restorablePush, [routeBuilder], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  _i13.Future<T?> pushReplacement<T extends Object?, TO extends Object?>(
          _i8.Route<T>? newRoute,
          {TO? result}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacement, [newRoute], {#result: result}),
          returnValue: _i13.Future<T?>.value()) as _i13.Future<T?>);
  @override
  String restorablePushReplacement<T extends Object?, TO extends Object?>(
          _i8.RestorableRouteBuilder<T>? routeBuilder,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushReplacement, [routeBuilder],
              {#result: result, #arguments: arguments}),
          returnValue: '') as String);
  @override
  _i13.Future<T?> pushAndRemoveUntil<T extends Object?>(
          _i8.Route<T>? newRoute, _i8.RoutePredicate? predicate) =>
      (super.noSuchMethod(
          Invocation.method(#pushAndRemoveUntil, [newRoute, predicate]),
          returnValue: _i13.Future<T?>.value()) as _i13.Future<T?>);
  @override
  String restorablePushAndRemoveUntil<T extends Object?>(
          _i8.RestorableRouteBuilder<T>? newRouteBuilder,
          _i8.RoutePredicate? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushAndRemoveUntil,
              [newRouteBuilder, predicate], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  void replace<T extends Object?>(
          {_i8.Route<dynamic>? oldRoute, _i8.Route<T>? newRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #replace, [], {#oldRoute: oldRoute, #newRoute: newRoute}),
          returnValueForMissingStub: null);
  @override
  String restorableReplace<T extends Object?>(
          {_i8.Route<dynamic>? oldRoute,
          _i8.RestorableRouteBuilder<T>? newRouteBuilder,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorableReplace, [], {
            #oldRoute: oldRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments
          }),
          returnValue: '') as String);
  @override
  void replaceRouteBelow<T extends Object?>(
          {_i8.Route<dynamic>? anchorRoute, _i8.Route<T>? newRoute}) =>
      super.noSuchMethod(
          Invocation.method(#replaceRouteBelow, [],
              {#anchorRoute: anchorRoute, #newRoute: newRoute}),
          returnValueForMissingStub: null);
  @override
  String restorableReplaceRouteBelow<T extends Object?>(
          {_i8.Route<dynamic>? anchorRoute,
          _i8.RestorableRouteBuilder<T>? newRouteBuilder,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorableReplaceRouteBelow, [], {
            #anchorRoute: anchorRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments
          }),
          returnValue: '') as String);
  @override
  bool canPop() =>
      (super.noSuchMethod(Invocation.method(#canPop, []), returnValue: false)
          as bool);
  @override
  _i13.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#maybePop, [result]),
          returnValue: _i13.Future<bool>.value(false)) as _i13.Future<bool>);
  @override
  void pop<T extends Object?>([T? result]) =>
      super.noSuchMethod(Invocation.method(#pop, [result]),
          returnValueForMissingStub: null);
  @override
  void popUntil(_i8.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void removeRoute(_i8.Route<dynamic>? route) =>
      super.noSuchMethod(Invocation.method(#removeRoute, [route]),
          returnValueForMissingStub: null);
  @override
  void removeRouteBelow(_i8.Route<dynamic>? anchorRoute) =>
      super.noSuchMethod(Invocation.method(#removeRouteBelow, [anchorRoute]),
          returnValueForMissingStub: null);
  @override
  void finalizeRoute(_i8.Route<dynamic>? route) =>
      super.noSuchMethod(Invocation.method(#finalizeRoute, [route]),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStartUserGesture, []),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  _i8.Widget build(_i8.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
              returnValue:
                  _FakeWidget_10(this, Invocation.method(#build, [context])))
          as _i8.Widget);
  @override
  void reassemble() => super.noSuchMethod(Invocation.method(#reassemble, []),
      returnValueForMissingStub: null);
  @override
  void setState(_i14.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  void debugFillProperties(_i9.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toString({_i8.DiagnosticLevel? minLevel = _i8.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  _i8.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i9.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #toDiagnosticsNode, [], {#name: name, #style: style}),
              returnValue: _FakeDiagnosticsNode_12(
                  this,
                  Invocation.method(
                      #toDiagnosticsNode, [], {#name: name, #style: style})))
          as _i8.DiagnosticsNode);
  @override
  _i11.Ticker createTicker(_i11.TickerCallback? onTick) => (super.noSuchMethod(
          Invocation.method(#createTicker, [onTick]),
          returnValue:
              _FakeTicker_18(this, Invocation.method(#createTicker, [onTick])))
      as _i11.Ticker);
  @override
  void registerForRestoration(
          _i8.RestorableProperty<Object?>? property, String? restorationId) =>
      super.noSuchMethod(
          Invocation.method(#registerForRestoration, [property, restorationId]),
          returnValueForMissingStub: null);
  @override
  void unregisterFromRestoration(_i8.RestorableProperty<Object?>? property) =>
      super.noSuchMethod(
          Invocation.method(#unregisterFromRestoration, [property]),
          returnValueForMissingStub: null);
  @override
  void didUpdateRestorationId() =>
      super.noSuchMethod(Invocation.method(#didUpdateRestorationId, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [ReauthenticateHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockReauthenticateHelper extends _i1.Mock
    implements _i6.ReauthenticateHelper {
  MockReauthenticateHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Future<bool> showDialog(
          _i8.BuildContext? context,
          _i7.FirebaseAuth? auth,
          List<_i17.ProviderConfiguration>? providerConfigs) =>
      (super.noSuchMethod(
          Invocation.method(#showDialog, [context, auth, providerConfigs]),
          returnValue: _i13.Future<bool>.value(false)) as _i13.Future<bool>);
}
