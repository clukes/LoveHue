// Mocks generated by Mockito 5.3.2 from annotations
// in lovehue/test/mocker.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i18;
import 'dart:ui' as _i19;

import 'package:clock/clock.dart' as _i13;
import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:firebase_auth/firebase_auth.dart' as _i7;
import 'package:firebase_core/firebase_core.dart' as _i16;
import 'package:firebase_messaging/firebase_messaging.dart' as _i14;
import 'package:firebase_ui_auth/firebase_ui_auth.dart' as _i23;
import 'package:flutter/material.dart' as _i9;
import 'package:flutter/scheduler.dart' as _i12;
import 'package:flutter/src/foundation/assertions.dart' as _i22;
import 'package:flutter/src/foundation/diagnostics.dart' as _i10;
import 'package:lovehue/models/relationship_bar_document.dart' as _i21;
import 'package:lovehue/models/user_information.dart' as _i20;
import 'package:lovehue/providers/application_state.dart' as _i17;
import 'package:lovehue/providers/partners_info_state.dart' as _i3;
import 'package:lovehue/providers/user_info_state.dart' as _i2;
import 'package:lovehue/resources/authentication_info.dart' as _i6;
import 'package:lovehue/services/database_service.dart' as _i25;
import 'package:lovehue/services/notification_service.dart' as _i8;
import 'package:lovehue/services/shared_preferences_service.dart' as _i24;
import 'package:lovehue/utils/app_info_class.dart' as _i5;
import 'package:lovehue/utils/configs.dart' as _i26;
import 'package:mockito/mockito.dart' as _i1;
import 'package:package_info_plus/package_info_plus.dart' as _i11;
import 'package:shared_preferences/shared_preferences.dart' as _i15;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserInfoState_0 extends _i1.SmartFake implements _i2.UserInfoState {
  _FakeUserInfoState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePartnersInfoState_1 extends _i1.SmartFake
    implements _i3.PartnersInfoState {
  _FakePartnersInfoState_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseFirestore_2 extends _i1.SmartFake
    implements _i4.FirebaseFirestore {
  _FakeFirebaseFirestore_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppInfo_3 extends _i1.SmartFake implements _i5.AppInfo {
  _FakeAppInfo_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthenticationInfo_4 extends _i1.SmartFake
    implements _i6.AuthenticationInfo {
  _FakeAuthenticationInfo_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseAuth_5 extends _i1.SmartFake implements _i7.FirebaseAuth {
  _FakeFirebaseAuth_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationService_6 extends _i1.SmartFake
    implements _i8.NotificationService {
  _FakeNotificationService_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNudgeResult_7 extends _i1.SmartFake implements _i8.NudgeResult {
  _FakeNudgeResult_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeValueNotifier_8<T> extends _i1.SmartFake
    implements _i9.ValueNotifier<T> {
  _FakeValueNotifier_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCollectionReference_9<T extends Object?> extends _i1.SmartFake
    implements _i4.CollectionReference<T> {
  _FakeCollectionReference_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentSnapshot_10<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDocumentReference_11<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentReference<T> {
  _FakeDocumentReference_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWidget_12 extends _i1.SmartFake implements _i9.Widget {
  _FakeWidget_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeInheritedWidget_13 extends _i1.SmartFake
    implements _i9.InheritedWidget {
  _FakeInheritedWidget_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_14 extends _i1.SmartFake
    implements _i9.DiagnosticsNode {
  _FakeDiagnosticsNode_14(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i10.TextTreeConfiguration? parentConfiguration,
    _i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeActionCodeSettings_15 extends _i1.SmartFake
    implements _i7.ActionCodeSettings {
  _FakeActionCodeSettings_15(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePackageInfo_16 extends _i1.SmartFake implements _i11.PackageInfo {
  _FakePackageInfo_16(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFocusScopeNode_17 extends _i1.SmartFake
    implements _i9.FocusScopeNode {
  _FakeFocusScopeNode_17(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeNavigator_18 extends _i1.SmartFake implements _i9.Navigator {
  _FakeNavigator_18(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_19 extends _i1.SmartFake implements _i9.BuildContext {
  _FakeBuildContext_19(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTicker_20 extends _i1.SmartFake implements _i12.Ticker {
  _FakeTicker_20(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

class _FakeClock_21 extends _i1.SmartFake implements _i13.Clock {
  _FakeClock_21(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseMessaging_22 extends _i1.SmartFake
    implements _i14.FirebaseMessaging {
  _FakeFirebaseMessaging_22(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSharedPreferences_23 extends _i1.SmartFake
    implements _i15.SharedPreferences {
  _FakeSharedPreferences_23(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFirebaseApp_24 extends _i1.SmartFake implements _i16.FirebaseApp {
  _FakeFirebaseApp_24(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNotificationSettings_25 extends _i1.SmartFake
    implements _i14.NotificationSettings {
  _FakeNotificationSettings_25(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ApplicationState].
///
/// See the documentation for Mockito's code generation for more information.
class MockApplicationState extends _i1.Mock implements _i17.ApplicationState {
  MockApplicationState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.ApplicationLoginState get loginState => (super.noSuchMethod(
        Invocation.getter(#loginState),
        returnValue: _i17.ApplicationLoginState.loggedOut,
      ) as _i17.ApplicationLoginState);
  @override
  set loginState(_i17.ApplicationLoginState? _loginState) => super.noSuchMethod(
        Invocation.setter(
          #loginState,
          _loginState,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i2.UserInfoState get userInfoState => (super.noSuchMethod(
        Invocation.getter(#userInfoState),
        returnValue: _FakeUserInfoState_0(
          this,
          Invocation.getter(#userInfoState),
        ),
      ) as _i2.UserInfoState);
  @override
  _i3.PartnersInfoState get partnersInfoState => (super.noSuchMethod(
        Invocation.getter(#partnersInfoState),
        returnValue: _FakePartnersInfoState_1(
          this,
          Invocation.getter(#partnersInfoState),
        ),
      ) as _i3.PartnersInfoState);
  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i4.FirebaseFirestore);
  @override
  _i5.AppInfo get appInfo => (super.noSuchMethod(
        Invocation.getter(#appInfo),
        returnValue: _FakeAppInfo_3(
          this,
          Invocation.getter(#appInfo),
        ),
      ) as _i5.AppInfo);
  @override
  _i6.AuthenticationInfo get authenticationInfo => (super.noSuchMethod(
        Invocation.getter(#authenticationInfo),
        returnValue: _FakeAuthenticationInfo_4(
          this,
          Invocation.getter(#authenticationInfo),
        ),
      ) as _i6.AuthenticationInfo);
  @override
  _i7.FirebaseAuth get auth => (super.noSuchMethod(
        Invocation.getter(#auth),
        returnValue: _FakeFirebaseAuth_5(
          this,
          Invocation.getter(#auth),
        ),
      ) as _i7.FirebaseAuth);
  @override
  _i8.NotificationService get notificationService => (super.noSuchMethod(
        Invocation.getter(#notificationService),
        returnValue: _FakeNotificationService_6(
          this,
          Invocation.getter(#notificationService),
        ),
      ) as _i8.NotificationService);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i18.Future<void> signInAnonymously(_i9.NavigatorState? navigator) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [navigator],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<_i8.NudgeResult> sendNudgeNotification() => (super.noSuchMethod(
        Invocation.method(
          #sendNudgeNotification,
          [],
        ),
        returnValue: _i18.Future<_i8.NudgeResult>.value(_FakeNudgeResult_7(
          this,
          Invocation.method(
            #sendNudgeNotification,
            [],
          ),
        )),
      ) as _i18.Future<_i8.NudgeResult>);
  @override
  bool canSendNudgeNotification() => (super.noSuchMethod(
        Invocation.method(
          #canSendNudgeNotification,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  void addListener(_i19.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i19.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UserInfoState].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInfoState extends _i1.Mock implements _i2.UserInfoState {
  MockUserInfoState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.PartnersInfoState get partnersInfoState => (super.noSuchMethod(
        Invocation.getter(#partnersInfoState),
        returnValue: _FakePartnersInfoState_1(
          this,
          Invocation.getter(#partnersInfoState),
        ),
      ) as _i3.PartnersInfoState);
  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i4.FirebaseFirestore);
  @override
  set firestore(_i4.FirebaseFirestore? _firestore) => super.noSuchMethod(
        Invocation.setter(
          #firestore,
          _firestore,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set userInfo(_i20.UserInformation? _userInfo) => super.noSuchMethod(
        Invocation.setter(
          #userInfo,
          _userInfo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set latestRelationshipBarDoc(
          _i21.RelationshipBarDocument? _latestRelationshipBarDoc) =>
      super.noSuchMethod(
        Invocation.setter(
          #latestRelationshipBarDoc,
          _latestRelationshipBarDoc,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get barsChanged => (super.noSuchMethod(
        Invocation.getter(#barsChanged),
        returnValue: false,
      ) as bool);
  @override
  set barsChanged(bool? _barsChanged) => super.noSuchMethod(
        Invocation.setter(
          #barsChanged,
          _barsChanged,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get barsReset => (super.noSuchMethod(
        Invocation.getter(#barsReset),
        returnValue: false,
      ) as bool);
  @override
  set barsReset(bool? _barsReset) => super.noSuchMethod(
        Invocation.setter(
          #barsReset,
          _barsReset,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get userExist => (super.noSuchMethod(
        Invocation.getter(#userExist),
        returnValue: false,
      ) as bool);
  @override
  bool get userPending => (super.noSuchMethod(
        Invocation.getter(#userPending),
        returnValue: false,
      ) as bool);
  @override
  bool get partnerLinked => (super.noSuchMethod(
        Invocation.getter(#partnerLinked),
        returnValue: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void setupUserInfoSubscription() => super.noSuchMethod(
        Invocation.method(
          #setupUserInfoSubscription,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addUser(_i20.UserInformation? newUserInfo) => super.noSuchMethod(
        Invocation.method(
          #addUser,
          [newUserInfo],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeUser() => super.noSuchMethod(
        Invocation.method(
          #removeUser,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void barChange() => super.noSuchMethod(
        Invocation.method(
          #barChange,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void resetBarChange() => super.noSuchMethod(
        Invocation.method(
          #resetBarChange,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<void> connectTo(String? linkCode) => (super.noSuchMethod(
        Invocation.method(
          #connectTo,
          [linkCode],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> acceptRequest() => (super.noSuchMethod(
        Invocation.method(
          #acceptRequest,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> unlink() => (super.noSuchMethod(
        Invocation.method(
          #unlink,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> saveBars() => (super.noSuchMethod(
        Invocation.method(
          #saveBars,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  void addListener(_i19.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i19.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PartnersInfoState].
///
/// See the documentation for Mockito's code generation for more information.
class MockPartnersInfoState extends _i1.Mock implements _i3.PartnersInfoState {
  MockPartnersInfoState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.NotificationService get notificationService => (super.noSuchMethod(
        Invocation.getter(#notificationService),
        returnValue: _FakeNotificationService_6(
          this,
          Invocation.getter(#notificationService),
        ),
      ) as _i8.NotificationService);
  @override
  set partnersInfo(_i20.UserInformation? _partnersInfo) => super.noSuchMethod(
        Invocation.setter(
          #partnersInfo,
          _partnersInfo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.ValueNotifier<String> get partnersName => (super.noSuchMethod(
        Invocation.getter(#partnersName),
        returnValue: _FakeValueNotifier_8<String>(
          this,
          Invocation.getter(#partnersName),
        ),
      ) as _i9.ValueNotifier<String>);
  @override
  set partnersName(_i9.ValueNotifier<String>? _partnersName) =>
      super.noSuchMethod(
        Invocation.setter(
          #partnersName,
          _partnersName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get partnerExist => (super.noSuchMethod(
        Invocation.getter(#partnerExist),
        returnValue: false,
      ) as bool);
  @override
  bool get partnerPending => (super.noSuchMethod(
        Invocation.getter(#partnerPending),
        returnValue: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void notify() => super.noSuchMethod(
        Invocation.method(
          #notify,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setupPartnerInfoSubscription(_i20.UserInformation? currentUserInfo) =>
      super.noSuchMethod(
        Invocation.method(
          #setupPartnerInfoSubscription,
          [currentUserInfo],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<void> addPartner(
    _i20.UserInformation? newPartnerInfo,
    _i20.UserInformation? currentUserInfo,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addPartner,
          [
            newPartnerInfo,
            currentUserInfo,
          ],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> removePartner(_i20.UserInformation? currentUserInfo) =>
      (super.noSuchMethod(
        Invocation.method(
          #removePartner,
          [currentUserInfo],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  void addListener(_i19.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i19.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i4.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i4.FirebaseFirestore);
  @override
  String get id => (super.noSuchMethod(
        Invocation.getter(#id),
        returnValue: '',
      ) as String);
  @override
  _i4.CollectionReference<T> get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeCollectionReference_9<T>(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i4.CollectionReference<T>);
  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: '',
      ) as String);
  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(
        Invocation.method(
          #collection,
          [collectionPath],
        ),
        returnValue: _FakeCollectionReference_9<Map<String, dynamic>>(
          this,
          Invocation.method(
            #collection,
            [collectionPath],
          ),
        ),
      ) as _i4.CollectionReference<Map<String, dynamic>>);
  @override
  _i18.Future<void> delete() => (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> update(Map<String, Object?>? data) => (super.noSuchMethod(
        Invocation.method(
          #update,
          [data],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<_i4.DocumentSnapshot<T>> get([_i4.GetOptions? options]) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [options],
        ),
        returnValue: _i18.Future<_i4.DocumentSnapshot<T>>.value(
            _FakeDocumentSnapshot_10<T>(
          this,
          Invocation.method(
            #get,
            [options],
          ),
        )),
      ) as _i18.Future<_i4.DocumentSnapshot<T>>);
  @override
  _i18.Stream<_i4.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #snapshots,
          [],
          {#includeMetadataChanges: includeMetadataChanges},
        ),
        returnValue: _i18.Stream<_i4.DocumentSnapshot<T>>.empty(),
      ) as _i18.Stream<_i4.DocumentSnapshot<T>>);
  @override
  _i18.Future<void> set(
    T? data, [
    _i4.SetOptions? options,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #set,
          [
            data,
            options,
          ],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i4.DocumentReference<R> withConverter<R>({
    required _i4.FromFirestore<R>? fromFirestore,
    required _i4.ToFirestore<R>? toFirestore,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #withConverter,
          [],
          {
            #fromFirestore: fromFirestore,
            #toFirestore: toFirestore,
          },
        ),
        returnValue: _FakeDocumentReference_11<R>(
          this,
          Invocation.method(
            #withConverter,
            [],
            {
              #fromFirestore: fromFirestore,
              #toFirestore: toFirestore,
            },
          ),
        ),
      ) as _i4.DocumentReference<R>);
}

/// A class which mocks [UserInformation].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserInformation extends _i1.Mock implements _i20.UserInformation {
  MockUserInformation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get userID => (super.noSuchMethod(
        Invocation.getter(#userID),
        returnValue: '',
      ) as String);
  @override
  set displayName(String? _displayName) => super.noSuchMethod(
        Invocation.setter(
          #displayName,
          _displayName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set partner(_i4.DocumentReference<Object?>? _partner) => super.noSuchMethod(
        Invocation.setter(
          #partner,
          _partner,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.DocumentReference<Object?> get linkCode => (super.noSuchMethod(
        Invocation.getter(#linkCode),
        returnValue: _FakeDocumentReference_11<Object?>(
          this,
          Invocation.getter(#linkCode),
        ),
      ) as _i4.DocumentReference<Object?>);
  @override
  set linkCode(_i4.DocumentReference<Object?>? _linkCode) => super.noSuchMethod(
        Invocation.setter(
          #linkCode,
          _linkCode,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get linkPending => (super.noSuchMethod(
        Invocation.getter(#linkPending),
        returnValue: false,
      ) as bool);
  @override
  set linkPending(bool? _linkPending) => super.noSuchMethod(
        Invocation.setter(
          #linkPending,
          _linkPending,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i4.FirebaseFirestore);
  @override
  set firestore(_i4.FirebaseFirestore? _firestore) => super.noSuchMethod(
        Invocation.setter(
          #firestore,
          _firestore,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Map<String, Object?> toMap() => (super.noSuchMethod(
        Invocation.method(
          #toMap,
          [],
        ),
        returnValue: <String, Object?>{},
      ) as Map<String, Object?>);
  @override
  _i4.DocumentReference<_i20.UserInformation?> getUserInDatabase() =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserInDatabase,
          [],
        ),
        returnValue: _FakeDocumentReference_11<_i20.UserInformation?>(
          this,
          Invocation.method(
            #getUserInDatabase,
            [],
          ),
        ),
      ) as _i4.DocumentReference<_i20.UserInformation?>);
  @override
  _i18.Future<void> firestoreSet() => (super.noSuchMethod(
        Invocation.method(
          #firestoreSet,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> firestoreUpdateColumns(Map<String, Object?>? data) =>
      (super.noSuchMethod(
        Invocation.method(
          #firestoreUpdateColumns,
          [data],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> firestoreDelete() => (super.noSuchMethod(
        Invocation.method(
          #firestoreDelete,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> deleteUserData(
    _i9.BuildContext? context,
    _i7.FirebaseAuth? auth,
    _i6.AuthenticationInfo? authenticationInfo,
    _i8.NotificationService? notificationService,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUserData,
          [
            context,
            auth,
            authenticationInfo,
            notificationService,
          ],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> setupUserInDatabase(_i2.UserInfoState? userInfoState) =>
      (super.noSuchMethod(
        Invocation.method(
          #setupUserInDatabase,
          [userInfoState],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i9.BuildContext {
  MockBuildContext() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_12(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i9.Widget);
  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
      ) as bool);
  @override
  _i9.InheritedWidget dependOnInheritedElement(
    _i9.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_13(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i9.InheritedWidget);
  @override
  void visitAncestorElements(bool Function(_i9.Element)? visitor) =>
      super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void visitChildElements(_i9.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispatchNotification(_i9.Notification? notification) =>
      super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.DiagnosticsNode describeElement(
    String? name, {
    _i22.DiagnosticsTreeStyle? style = _i22.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_14(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i9.DiagnosticsNode);
  @override
  _i9.DiagnosticsNode describeWidget(
    String? name, {
    _i22.DiagnosticsTreeStyle? style = _i22.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_14(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i9.DiagnosticsNode);
  @override
  List<_i9.DiagnosticsNode> describeMissingAncestor(
          {required Type? expectedAncestorType}) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i9.DiagnosticsNode>[],
      ) as List<_i9.DiagnosticsNode>);
  @override
  _i9.DiagnosticsNode describeOwnershipChain(String? name) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_14(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i9.DiagnosticsNode);
}

/// A class which mocks [AuthenticationInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationInfo extends _i1.Mock
    implements _i6.AuthenticationInfo {
  MockAuthenticationInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.ActionCodeSettings get actionCodeSettings => (super.noSuchMethod(
        Invocation.getter(#actionCodeSettings),
        returnValue: _FakeActionCodeSettings_15(
          this,
          Invocation.getter(#actionCodeSettings),
        ),
      ) as _i7.ActionCodeSettings);
  @override
  set actionCodeSettings(_i7.ActionCodeSettings? _actionCodeSettings) =>
      super.noSuchMethod(
        Invocation.setter(
          #actionCodeSettings,
          _actionCodeSettings,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i11.PackageInfo get packageInfo => (super.noSuchMethod(
        Invocation.getter(#packageInfo),
        returnValue: _FakePackageInfo_16(
          this,
          Invocation.getter(#packageInfo),
        ),
      ) as _i11.PackageInfo);
  @override
  set packageInfo(_i11.PackageInfo? _packageInfo) => super.noSuchMethod(
        Invocation.setter(
          #packageInfo,
          _packageInfo,
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<_i23.AuthProvider<_i23.AuthListener, _i7.AuthCredential>>
      get providers => (super.noSuchMethod(
            Invocation.getter(#providers),
            returnValue: <
                _i23.AuthProvider<_i23.AuthListener, _i7.AuthCredential>>[],
          ) as List<_i23.AuthProvider<_i23.AuthListener, _i7.AuthCredential>>);
  @override
  set providers(
          List<_i23.AuthProvider<_i23.AuthListener, _i7.AuthCredential>>?
              _providers) =>
      super.noSuchMethod(
        Invocation.setter(
          #providers,
          _providers,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<void> signInAnonymously(
    _i9.NavigatorState? navigator,
    _i7.FirebaseAuth? auth,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInAnonymously,
          [
            navigator,
            auth,
          ],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  void afterSignIn(_i9.NavigatorState? navigator) => super.noSuchMethod(
        Invocation.method(
          #afterSignIn,
          [navigator],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<bool> reauthenticate(
    _i9.BuildContext? context,
    _i7.FirebaseAuth? auth, {
    _i6.ReauthenticateHelper? helper,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #reauthenticate,
          [
            context,
            auth,
          ],
          {#helper: helper},
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
}

/// A class which mocks [AppInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppInfo extends _i1.Mock implements _i5.AppInfo {
  MockAppInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get appName => (super.noSuchMethod(
        Invocation.getter(#appName),
        returnValue: '',
      ) as String);
  @override
  String get aboutText => (super.noSuchMethod(
        Invocation.getter(#aboutText),
        returnValue: '',
      ) as String);
}

/// A class which mocks [NavigatorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorState extends _i1.Mock implements _i9.NavigatorState {
  MockNavigatorState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.FocusScopeNode get focusScopeNode => (super.noSuchMethod(
        Invocation.getter(#focusScopeNode),
        returnValue: _FakeFocusScopeNode_17(
          this,
          Invocation.getter(#focusScopeNode),
        ),
      ) as _i9.FocusScopeNode);
  @override
  _i9.ValueNotifier<bool> get userGestureInProgressNotifier =>
      (super.noSuchMethod(
        Invocation.getter(#userGestureInProgressNotifier),
        returnValue: _FakeValueNotifier_8<bool>(
          this,
          Invocation.getter(#userGestureInProgressNotifier),
        ),
      ) as _i9.ValueNotifier<bool>);
  @override
  bool get userGestureInProgress => (super.noSuchMethod(
        Invocation.getter(#userGestureInProgress),
        returnValue: false,
      ) as bool);
  @override
  _i9.Navigator get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeNavigator_18(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i9.Navigator);
  @override
  _i9.BuildContext get context => (super.noSuchMethod(
        Invocation.getter(#context),
        returnValue: _FakeBuildContext_19(
          this,
          Invocation.getter(#context),
        ),
      ) as _i9.BuildContext);
  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
      ) as bool);
  @override
  bool get restorePending => (super.noSuchMethod(
        Invocation.getter(#restorePending),
        returnValue: false,
      ) as bool);
  @override
  void initState() => super.noSuchMethod(
        Invocation.method(
          #initState,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void restoreState(
    _i9.RestorationBucket? oldBucket,
    bool? initialRestore,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #restoreState,
          [
            oldBucket,
            initialRestore,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didToggleBucket(_i9.RestorationBucket? oldBucket) => super.noSuchMethod(
        Invocation.method(
          #didToggleBucket,
          [oldBucket],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didChangeDependencies() => super.noSuchMethod(
        Invocation.method(
          #didChangeDependencies,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didUpdateWidget(_i9.StatefulWidget? oldWidget) => super.noSuchMethod(
        Invocation.method(
          #didUpdateWidget,
          [oldWidget],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void deactivate() => super.noSuchMethod(
        Invocation.method(
          #deactivate,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void activate() => super.noSuchMethod(
        Invocation.method(
          #activate,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i18.Future<T?> pushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamed,
          [routeName],
          {#arguments: arguments},
        ),
        returnValue: _i18.Future<T?>.value(),
      ) as _i18.Future<T?>);
  @override
  String restorablePushNamed<T extends Object?>(
    String? routeName, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushNamed,
          [routeName],
          {#arguments: arguments},
        ),
        returnValue: '',
      ) as String);
  @override
  _i18.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacementNamed,
          [routeName],
          {
            #result: result,
            #arguments: arguments,
          },
        ),
        returnValue: _i18.Future<T?>.value(),
      ) as _i18.Future<T?>);
  @override
  String restorablePushReplacementNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushReplacementNamed,
          [routeName],
          {
            #result: result,
            #arguments: arguments,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  _i18.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #popAndPushNamed,
          [routeName],
          {
            #result: result,
            #arguments: arguments,
          },
        ),
        returnValue: _i18.Future<T?>.value(),
      ) as _i18.Future<T?>);
  @override
  String restorablePopAndPushNamed<T extends Object?, TO extends Object?>(
    String? routeName, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePopAndPushNamed,
          [routeName],
          {
            #result: result,
            #arguments: arguments,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  _i18.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    _i9.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushNamedAndRemoveUntil,
          [
            newRouteName,
            predicate,
          ],
          {#arguments: arguments},
        ),
        returnValue: _i18.Future<T?>.value(),
      ) as _i18.Future<T?>);
  @override
  String restorablePushNamedAndRemoveUntil<T extends Object?>(
    String? newRouteName,
    _i9.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushNamedAndRemoveUntil,
          [
            newRouteName,
            predicate,
          ],
          {#arguments: arguments},
        ),
        returnValue: '',
      ) as String);
  @override
  _i18.Future<T?> push<T extends Object?>(_i9.Route<T>? route) =>
      (super.noSuchMethod(
        Invocation.method(
          #push,
          [route],
        ),
        returnValue: _i18.Future<T?>.value(),
      ) as _i18.Future<T?>);
  @override
  String restorablePush<T extends Object?>(
    _i9.RestorableRouteBuilder<T>? routeBuilder, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePush,
          [routeBuilder],
          {#arguments: arguments},
        ),
        returnValue: '',
      ) as String);
  @override
  _i18.Future<T?> pushReplacement<T extends Object?, TO extends Object?>(
    _i9.Route<T>? newRoute, {
    TO? result,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushReplacement,
          [newRoute],
          {#result: result},
        ),
        returnValue: _i18.Future<T?>.value(),
      ) as _i18.Future<T?>);
  @override
  String restorablePushReplacement<T extends Object?, TO extends Object?>(
    _i9.RestorableRouteBuilder<T>? routeBuilder, {
    TO? result,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushReplacement,
          [routeBuilder],
          {
            #result: result,
            #arguments: arguments,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  _i18.Future<T?> pushAndRemoveUntil<T extends Object?>(
    _i9.Route<T>? newRoute,
    _i9.RoutePredicate? predicate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #pushAndRemoveUntil,
          [
            newRoute,
            predicate,
          ],
        ),
        returnValue: _i18.Future<T?>.value(),
      ) as _i18.Future<T?>);
  @override
  String restorablePushAndRemoveUntil<T extends Object?>(
    _i9.RestorableRouteBuilder<T>? newRouteBuilder,
    _i9.RoutePredicate? predicate, {
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorablePushAndRemoveUntil,
          [
            newRouteBuilder,
            predicate,
          ],
          {#arguments: arguments},
        ),
        returnValue: '',
      ) as String);
  @override
  void replace<T extends Object?>({
    required _i9.Route<dynamic>? oldRoute,
    required _i9.Route<T>? newRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #replace,
          [],
          {
            #oldRoute: oldRoute,
            #newRoute: newRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  String restorableReplace<T extends Object?>({
    required _i9.Route<dynamic>? oldRoute,
    required _i9.RestorableRouteBuilder<T>? newRouteBuilder,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorableReplace,
          [],
          {
            #oldRoute: oldRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  void replaceRouteBelow<T extends Object?>({
    required _i9.Route<dynamic>? anchorRoute,
    required _i9.Route<T>? newRoute,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #replaceRouteBelow,
          [],
          {
            #anchorRoute: anchorRoute,
            #newRoute: newRoute,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  String restorableReplaceRouteBelow<T extends Object?>({
    required _i9.Route<dynamic>? anchorRoute,
    required _i9.RestorableRouteBuilder<T>? newRouteBuilder,
    Object? arguments,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #restorableReplaceRouteBelow,
          [],
          {
            #anchorRoute: anchorRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  bool canPop() => (super.noSuchMethod(
        Invocation.method(
          #canPop,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i18.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(
        Invocation.method(
          #maybePop,
          [result],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  void pop<T extends Object?>([T? result]) => super.noSuchMethod(
        Invocation.method(
          #pop,
          [result],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void popUntil(_i9.RoutePredicate? predicate) => super.noSuchMethod(
        Invocation.method(
          #popUntil,
          [predicate],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeRoute(_i9.Route<dynamic>? route) => super.noSuchMethod(
        Invocation.method(
          #removeRoute,
          [route],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeRouteBelow(_i9.Route<dynamic>? anchorRoute) => super.noSuchMethod(
        Invocation.method(
          #removeRouteBelow,
          [anchorRoute],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void finalizeRoute(_i9.Route<dynamic>? route) => super.noSuchMethod(
        Invocation.method(
          #finalizeRoute,
          [route],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStartUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStartUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didStopUserGesture() => super.noSuchMethod(
        Invocation.method(
          #didStopUserGesture,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Widget build(_i9.BuildContext? context) => (super.noSuchMethod(
        Invocation.method(
          #build,
          [context],
        ),
        returnValue: _FakeWidget_12(
          this,
          Invocation.method(
            #build,
            [context],
          ),
        ),
      ) as _i9.Widget);
  @override
  void reassemble() => super.noSuchMethod(
        Invocation.method(
          #reassemble,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setState(_i19.VoidCallback? fn) => super.noSuchMethod(
        Invocation.method(
          #setState,
          [fn],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void debugFillProperties(_i22.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toString({_i9.DiagnosticLevel? minLevel = _i9.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  _i9.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i22.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_14(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i9.DiagnosticsNode);
  @override
  _i12.Ticker createTicker(_i12.TickerCallback? onTick) => (super.noSuchMethod(
        Invocation.method(
          #createTicker,
          [onTick],
        ),
        returnValue: _FakeTicker_20(
          this,
          Invocation.method(
            #createTicker,
            [onTick],
          ),
        ),
      ) as _i12.Ticker);
  @override
  void registerForRestoration(
    _i9.RestorableProperty<Object?>? property,
    String? restorationId,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #registerForRestoration,
          [
            property,
            restorationId,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void unregisterFromRestoration(_i9.RestorableProperty<Object?>? property) =>
      super.noSuchMethod(
        Invocation.method(
          #unregisterFromRestoration,
          [property],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void didUpdateRestorationId() => super.noSuchMethod(
        Invocation.method(
          #didUpdateRestorationId,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ReauthenticateHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockReauthenticateHelper extends _i1.Mock
    implements _i6.ReauthenticateHelper {
  MockReauthenticateHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i18.Future<bool> showDialog(
    _i9.BuildContext? context,
    _i7.FirebaseAuth? auth,
    List<_i23.AuthProvider<_i23.AuthListener, _i7.AuthCredential>>? providers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [
            context,
            auth,
            providers,
          ],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
}

/// A class which mocks [NotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationService extends _i1.Mock
    implements _i8.NotificationService {
  MockNotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i13.Clock get clock => (super.noSuchMethod(
        Invocation.getter(#clock),
        returnValue: _FakeClock_21(
          this,
          Invocation.getter(#clock),
        ),
      ) as _i13.Clock);
  @override
  _i14.FirebaseMessaging get firebaseMessaging => (super.noSuchMethod(
        Invocation.getter(#firebaseMessaging),
        returnValue: _FakeFirebaseMessaging_22(
          this,
          Invocation.getter(#firebaseMessaging),
        ),
      ) as _i14.FirebaseMessaging);
  @override
  set firebaseMessaging(_i14.FirebaseMessaging? _firebaseMessaging) =>
      super.noSuchMethod(
        Invocation.setter(
          #firebaseMessaging,
          _firebaseMessaging,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String notificationDocumentPath(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #notificationDocumentPath,
          [userId],
        ),
        returnValue: '',
      ) as String);
  @override
  _i18.Future<_i8.NudgeResult> sendNudgeNotification(String? currentUserId) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendNudgeNotification,
          [currentUserId],
        ),
        returnValue: _i18.Future<_i8.NudgeResult>.value(_FakeNudgeResult_7(
          this,
          Invocation.method(
            #sendNudgeNotification,
            [currentUserId],
          ),
        )),
      ) as _i18.Future<_i8.NudgeResult>);
  @override
  bool canSendNudgeNotification() => (super.noSuchMethod(
        Invocation.method(
          #canSendNudgeNotification,
          [],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i18.Future<void> subscribeToNotificationsAsync(String? partnersId) =>
      (super.noSuchMethod(
        Invocation.method(
          #subscribeToNotificationsAsync,
          [partnersId],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> unsubscribeFromNotificationsAsync(String? partnersId) =>
      (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromNotificationsAsync,
          [partnersId],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
}

/// A class which mocks [SharedPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferences extends _i1.Mock implements _i15.SharedPreferences {
  MockSharedPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Set<String> getKeys() => (super.noSuchMethod(
        Invocation.method(
          #getKeys,
          [],
        ),
        returnValue: <String>{},
      ) as Set<String>);
  @override
  Object? get(String? key) => (super.noSuchMethod(Invocation.method(
        #get,
        [key],
      )) as Object?);
  @override
  bool? getBool(String? key) => (super.noSuchMethod(Invocation.method(
        #getBool,
        [key],
      )) as bool?);
  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);
  @override
  double? getDouble(String? key) => (super.noSuchMethod(Invocation.method(
        #getDouble,
        [key],
      )) as double?);
  @override
  String? getString(String? key) => (super.noSuchMethod(Invocation.method(
        #getString,
        [key],
      )) as String?);
  @override
  bool containsKey(String? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);
  @override
  List<String>? getStringList(String? key) =>
      (super.noSuchMethod(Invocation.method(
        #getStringList,
        [key],
      )) as List<String>?);
  @override
  _i18.Future<bool> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<bool> setDouble(
    String? key,
    double? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDouble,
          [
            key,
            value,
          ],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<bool> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<bool> setStringList(
    String? key,
    List<String>? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setStringList,
          [
            key,
            value,
          ],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<bool> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<bool> commit() => (super.noSuchMethod(
        Invocation.method(
          #commit,
          [],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<bool> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<void> reload() => (super.noSuchMethod(
        Invocation.method(
          #reload,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
}

/// A class which mocks [SharedPreferencesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSharedPreferencesService extends _i1.Mock
    implements _i24.SharedPreferencesService {
  MockSharedPreferencesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i15.SharedPreferences get preferences => (super.noSuchMethod(
        Invocation.getter(#preferences),
        returnValue: _FakeSharedPreferences_23(
          this,
          Invocation.getter(#preferences),
        ),
      ) as _i15.SharedPreferences);
  @override
  _i18.Future<bool> setInt(
    String? key,
    int? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setInt,
          [
            key,
            value,
          ],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  int? getInt(String? key) => (super.noSuchMethod(Invocation.method(
        #getInt,
        [key],
      )) as int?);
}

/// A class which mocks [DatabaseService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseService extends _i1.Mock implements _i25.DatabaseService {
  MockDatabaseService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
        Invocation.getter(#firestore),
        returnValue: _FakeFirebaseFirestore_2(
          this,
          Invocation.getter(#firestore),
        ),
      ) as _i4.FirebaseFirestore);
  @override
  _i18.Future<void> saveAsync(
    String? docPath,
    Map<String, dynamic>? data, {
    bool? merge = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveAsync,
          [
            docPath,
            data,
          ],
          {#merge: merge},
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> writeObjectAsync<T extends _i25.Mappable>(
    String? docPath,
    T? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeObjectAsync,
          [
            docPath,
            data,
          ],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> mergeObjectAsync<T extends _i25.Mappable>(
    String? docPath,
    T? data,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #mergeObjectAsync,
          [
            docPath,
            data,
          ],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
}

/// A class which mocks [NotificationsConfig].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationsConfig extends _i1.Mock
    implements _i26.NotificationsConfig {
  MockNotificationsConfig() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get notificationCollectionPath => (super.noSuchMethod(
        Invocation.getter(#notificationCollectionPath),
        returnValue: '',
      ) as String);
  @override
  String get columnRequested => (super.noSuchMethod(
        Invocation.getter(#columnRequested),
        returnValue: '',
      ) as String);
  @override
  String get columnCompleted => (super.noSuchMethod(
        Invocation.getter(#columnCompleted),
        returnValue: '',
      ) as String);
  @override
  int get minimumMillisecondsBetweenNudges => (super.noSuchMethod(
        Invocation.getter(#minimumMillisecondsBetweenNudges),
        returnValue: 0,
      ) as int);
}

/// A class which mocks [FirebaseMessaging].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseMessaging extends _i1.Mock implements _i14.FirebaseMessaging {
  MockFirebaseMessaging() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.FirebaseApp get app => (super.noSuchMethod(
        Invocation.getter(#app),
        returnValue: _FakeFirebaseApp_24(
          this,
          Invocation.getter(#app),
        ),
      ) as _i16.FirebaseApp);
  @override
  set app(_i16.FirebaseApp? _app) => super.noSuchMethod(
        Invocation.setter(
          #app,
          _app,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isAutoInitEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutoInitEnabled),
        returnValue: false,
      ) as bool);
  @override
  _i18.Stream<String> get onTokenRefresh => (super.noSuchMethod(
        Invocation.getter(#onTokenRefresh),
        returnValue: _i18.Stream<String>.empty(),
      ) as _i18.Stream<String>);
  @override
  Map<dynamic, dynamic> get pluginConstants => (super.noSuchMethod(
        Invocation.getter(#pluginConstants),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);
  @override
  _i18.Future<_i14.RemoteMessage?> getInitialMessage() => (super.noSuchMethod(
        Invocation.method(
          #getInitialMessage,
          [],
        ),
        returnValue: _i18.Future<_i14.RemoteMessage?>.value(),
      ) as _i18.Future<_i14.RemoteMessage?>);
  @override
  _i18.Future<void> deleteToken() => (super.noSuchMethod(
        Invocation.method(
          #deleteToken,
          [],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<String?> getAPNSToken() => (super.noSuchMethod(
        Invocation.method(
          #getAPNSToken,
          [],
        ),
        returnValue: _i18.Future<String?>.value(),
      ) as _i18.Future<String?>);
  @override
  _i18.Future<String?> getToken({String? vapidKey}) => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
          {#vapidKey: vapidKey},
        ),
        returnValue: _i18.Future<String?>.value(),
      ) as _i18.Future<String?>);
  @override
  _i18.Future<bool> isSupported() => (super.noSuchMethod(
        Invocation.method(
          #isSupported,
          [],
        ),
        returnValue: _i18.Future<bool>.value(false),
      ) as _i18.Future<bool>);
  @override
  _i18.Future<_i14.NotificationSettings> getNotificationSettings() =>
      (super.noSuchMethod(
        Invocation.method(
          #getNotificationSettings,
          [],
        ),
        returnValue: _i18.Future<_i14.NotificationSettings>.value(
            _FakeNotificationSettings_25(
          this,
          Invocation.method(
            #getNotificationSettings,
            [],
          ),
        )),
      ) as _i18.Future<_i14.NotificationSettings>);
  @override
  _i18.Future<_i14.NotificationSettings> requestPermission({
    bool? alert = true,
    bool? announcement = false,
    bool? badge = true,
    bool? carPlay = false,
    bool? criticalAlert = false,
    bool? provisional = false,
    bool? sound = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #requestPermission,
          [],
          {
            #alert: alert,
            #announcement: announcement,
            #badge: badge,
            #carPlay: carPlay,
            #criticalAlert: criticalAlert,
            #provisional: provisional,
            #sound: sound,
          },
        ),
        returnValue: _i18.Future<_i14.NotificationSettings>.value(
            _FakeNotificationSettings_25(
          this,
          Invocation.method(
            #requestPermission,
            [],
            {
              #alert: alert,
              #announcement: announcement,
              #badge: badge,
              #carPlay: carPlay,
              #criticalAlert: criticalAlert,
              #provisional: provisional,
              #sound: sound,
            },
          ),
        )),
      ) as _i18.Future<_i14.NotificationSettings>);
  @override
  _i18.Future<void> sendMessage({
    String? to,
    Map<String, String>? data,
    String? collapseKey,
    String? messageId,
    String? messageType,
    int? ttl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessage,
          [],
          {
            #to: to,
            #data: data,
            #collapseKey: collapseKey,
            #messageId: messageId,
            #messageType: messageType,
            #ttl: ttl,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> setAutoInitEnabled(bool? enabled) => (super.noSuchMethod(
        Invocation.method(
          #setAutoInitEnabled,
          [enabled],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> setDeliveryMetricsExportToBigQuery(bool? enabled) =>
      (super.noSuchMethod(
        Invocation.method(
          #setDeliveryMetricsExportToBigQuery,
          [enabled],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> setForegroundNotificationPresentationOptions({
    bool? alert = false,
    bool? badge = false,
    bool? sound = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setForegroundNotificationPresentationOptions,
          [],
          {
            #alert: alert,
            #badge: badge,
            #sound: sound,
          },
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> subscribeToTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #subscribeToTopic,
          [topic],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
  @override
  _i18.Future<void> unsubscribeFromTopic(String? topic) => (super.noSuchMethod(
        Invocation.method(
          #unsubscribeFromTopic,
          [topic],
        ),
        returnValue: _i18.Future<void>.value(),
        returnValueForMissingStub: _i18.Future<void>.value(),
      ) as _i18.Future<void>);
}
